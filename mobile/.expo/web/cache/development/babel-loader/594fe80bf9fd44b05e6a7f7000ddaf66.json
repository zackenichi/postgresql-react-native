{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Coding\\\\Builds\\\\end-to-end-react-native\\\\mobile\\\\App.js\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TaskInput from \"./components/TaskInput\";\nimport Data from \"./components/Data\";\nexport default function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      taskItems = _useState2[0],\n      setTaskItems = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAddMode = _useState4[0],\n      setIsAddMode = _useState4[1];\n\n  var newTaskHandler = function newTaskHandler(newTask) {\n    setTaskItems(function (currentTasks) {\n      return [].concat(_toConsumableArray(currentTasks), [{\n        id: Math.random().toString(),\n        value: newTask\n      }]);\n    });\n    createTask(newTask);\n    getTasks();\n    setIsAddMode(false);\n  };\n\n  var deleteTaskMemory = function deleteTaskMemory(taskId) {\n    setTaskItems(function (currentTasks) {\n      return currentTasks.filter(function (task) {\n        return task.id !== taskId;\n      });\n    });\n    deleteTask(taskId);\n    getTasks();\n  };\n\n  var cancelAddTask = function cancelAddTask() {\n    setIsAddMode(false);\n  };\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataResult = _useState6[0],\n      setDataResult = _useState6[1];\n\n  useEffect(function () {\n    getTasks();\n  }, []);\n\n  function getTasks() {\n    fetch(\"http://192.168.1.5:3001\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var sampleArray = [];\n      Object.values(data.dblisttask).forEach(function (value) {\n        sampleArray.push(value);\n      });\n      setTaskItems(sampleArray);\n      setDataResult(sampleArray);\n    });\n  }\n\n  function createTask(newTask) {\n    var title = newTask;\n    fetch(\"http://192.168.1.5:3001/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title: title\n      })\n    }).then(function (response) {\n      return response.text();\n    }).then(function () {\n      getTasks();\n    });\n  }\n\n  function deleteTask(taskId) {\n    var id = taskId;\n    fetch(\"http://192.168.1.5:3001/tasks/\" + id, {\n      method: \"DELETE\"\n    }).then(function (response) {\n      return response.text();\n    }).then(function (data) {\n      getTasks();\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Add Task\",\n    onPress: function onPress() {\n      return setIsAddMode(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), React.createElement(TaskInput, {\n    visible: isAddMode,\n    onNewTask: newTaskHandler,\n    cancelAddTask: cancelAddTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), React.createElement(Data, {\n    taskItems: taskItems,\n    deleteTask: deleteTaskMemory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), console.log(\"taskItems\", taskItems));\n}\nvar styles = StyleSheet.create({\n  screen: {\n    padding: 50\n  }\n});","map":{"version":3,"sources":["D:/Coding/Builds/end-to-end-react-native/mobile/App.js"],"names":["StatusBar","React","useState","useEffect","TaskInput","Data","App","taskItems","setTaskItems","isAddMode","setIsAddMode","newTaskHandler","newTask","currentTasks","id","Math","random","toString","value","createTask","getTasks","deleteTaskMemory","taskId","filter","task","deleteTask","cancelAddTask","dataResult","setDataResult","fetch","then","response","json","data","sampleArray","Object","values","dblisttask","forEach","push","title","method","headers","body","JSON","stringify","text","styles","screen","console","log","StyleSheet","create","padding"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, StyleSheet, View } from \"react-native\";\n\nimport TaskInput from \"./components/TaskInput\";\nimport Data from \"./components/Data\";\n\nexport default function App() {\n  const [taskItems, setTaskItems] = useState([]);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  const newTaskHandler = (newTask) => {\n    setTaskItems((currentTasks) => [\n      ...currentTasks,\n      {\n        id: Math.random().toString(),\n        value: newTask,\n      },\n    ]);\n    createTask(newTask);\n    getTasks();\n    setIsAddMode(false);\n  };\n\n  const deleteTaskMemory = (taskId) => {\n    setTaskItems((currentTasks) => {\n      return currentTasks.filter((task) => task.id !== taskId);\n    });\n    deleteTask(taskId);\n    getTasks();\n  };\n\n  const cancelAddTask = () => {\n    setIsAddMode(false);\n  };\n\n  // get data from database\n\n  const [dataResult, setDataResult] = useState([]);\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  function getTasks() {\n    fetch(\"http://192.168.1.5:3001\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        let sampleArray = [];\n        Object.values(data.dblisttask).forEach((value) => {\n          sampleArray.push(value);\n        });\n\n        setTaskItems(sampleArray);\n\n        setDataResult(sampleArray);\n      });\n  }\n\n  function createTask(newTask) {\n    let title = newTask;\n\n    fetch(\"http://192.168.1.5:3001/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ title }),\n    })\n      .then((response) => {\n        return response.text();\n      })\n      .then(() => {\n        getTasks();\n      });\n  }\n\n  function deleteTask(taskId) {\n    let id = taskId;\n\n    fetch(`http://192.168.1.5:3001/tasks/${id}`, {\n      method: \"DELETE\",\n    })\n      .then((response) => {\n        return response.text();\n      })\n      .then((data) => {\n        getTasks();\n      });\n  }\n\n  return (\n    <View style={styles.screen}>\n      <Button title=\"Add Task\" onPress={() => setIsAddMode(true)} />\n      <TaskInput\n        visible={isAddMode}\n        onNewTask={newTaskHandler}\n        cancelAddTask={cancelAddTask}\n      />\n      <Data taskItems={taskItems} deleteTask={deleteTaskMemory} />\n      {console.log(\"taskItems\", taskItems)}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: { padding: 50 },\n});\n"]},"metadata":{},"sourceType":"module"}